datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../app/schemas"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  Invoice  Invoice[]
  Session  Session[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model PaymentTerm {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  days     Int
  invoices Invoice[]
}

model InvoiceItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  quantity  Int
  price     Int
  Invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  invoiceId String
}

model Invoice {
  id        String   @id @default(cuid())
  fid       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  billFromStreet   String
  billFromCity     String
  billFromPostCode String
  billFromCountry  String

  clientName     String
  clientEmail    String
  billToStreet   String
  billToCity     String
  billToPostCode String
  billToCountry  String

  invoiceDate   String
  paymentTerm   PaymentTerm @relation(fields: [paymentTermId], references: [id])
  paymentTermId String

  projectDescription String

  /// @zod.custom(z.enum(["draft", "pending", "paid"]))
  status String

  items InvoiceItem[]
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@index([userId])
}
